# -*- coding: utf-8 -*-

"""
rootcollection

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from rootcollection.api_helper import APIHelper
from rootcollection.configuration import Server
from rootcollection.controllers.base_controller import BaseController
from rootcollection.models.forgot_password_locataire import ForgotPasswordLocataire
from rootcollection.models.reset_password_locataire import ResetPasswordLocataire
from rootcollection.models.forgot_password_am import ForgotPasswordAM


class ResetController(BaseController):

    """A Controller to access Endpoints in the rootcollection API."""
    def __init__(self, config, auth_managers):
        super(ResetController, self).__init__(config, auth_managers)

    def forgot_password_locataire(self,
                                  body):
        """Does a POST request to /mobile_passwordReset/locataire.

        TODO: type endpoint description here.

        Args:
            body (DeleteLocataireRequest): TODO: type description here.

        Returns:
            ForgotPasswordLocataire: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mobile_passwordReset/locataire'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ForgotPasswordLocataire.from_dictionary)

        return decoded

    def reset_password_locataire(self,
                                 body):
        """Does a PATCH request to /mobile_passwordReset/locataire/1/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF9sb2NhdGFpcmUiOjEsImlhdCI6MTY0Nzg5OTU2NX0.j7wVFUdUZTRhqFLR-dRITbYBqwZJPrQtAv8P_lIZawE.

        TODO: type endpoint description here.

        Args:
            body (ResetPasswordLocataireRequest): TODO: type description
                here.

        Returns:
            ResetPasswordLocataire: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mobile_passwordReset/locataire/1/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF9sb2NhdGFpcmUiOjEsImlhdCI6MTY0Nzg5OTU2NX0.j7wVFUdUZTRhqFLR-dRITbYBqwZJPrQtAv8P_lIZawE'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ResetPasswordLocataire.from_dictionary)

        return decoded

    def forgot_password_am(self,
                           body):
        """Does a POST request to /mobile_passwordReset/agent.

        TODO: type endpoint description here.

        Args:
            body (ForgotPasswordAMRequest): TODO: type description here.

        Returns:
            ForgotPasswordAM: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mobile_passwordReset/agent'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ForgotPasswordAM.from_dictionary)

        return decoded

    def reset_password_am(self,
                          body):
        """Does a PATCH request to /mobile_passwordReset/agent/1/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF9sb2NhdGFpcmUiOjEsImlhdCI6MTY0Nzg5OTU2NX0.j7wVFUdUZTRhqFLR-dRITbYBqwZJPrQtAv8P_lIZawE.

        TODO: type endpoint description here.

        Args:
            body (ResetPasswordLocataireRequest): TODO: type description
                here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mobile_passwordReset/agent/1/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF9sb2NhdGFpcmUiOjEsImlhdCI6MTY0Nzg5OTU2NX0.j7wVFUdUZTRhqFLR-dRITbYBqwZJPrQtAv8P_lIZawE'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)
